(ns api-server (:require [node.http] [node.url]))

(def users (atom [{:id 1 :name "Jo√£o" :email "joao@test.com"}
                  {:id 2 :name "Maria" :email "maria@test.com"}]))

(defn handle-get-users [req res]
  (.writeHead res 200 {:Content-Type "application/json"})
  (.end res (.stringify JSON @users)))

(defn handle-get-user [req res id]
  (let [user (first (filter (fn [u] (= (str (get u :id)) (str id))) @users))]
    (if user
      (do
        (.writeHead res 200 {:Content-Type "application/json"})
        (.end res (.stringify JSON user)))
      (do
        (.writeHead res 404 {:Content-Type "application/json"})
        (.end res (.stringify JSON {:error "User not found"}))))))

(defn parse-request-body [req callback]
  (let [body (atom "")]
    (.on req "data" (fn [chunk] 
      (swap! body str chunk)))
    (.on req "end" (fn [] (callback @body)))))

(defn handle-post-user [req res]
  (parse-request-body req
    (fn [body]
      (let [parseddata (json/parse body)
            name (get parseddata "name")
            email (get parseddata "email")
            newid (+ (count @users) 1)
            newuser (assoc {} :id newid :name name :email email)]
        (do
          (println "[DEBUG] Raw body:" body)
          (println "[DEBUG] Parsed data:" parseddata)
          (println "[DEBUG] Name:" name)
          (println "[DEBUG] Email:" email)
          (println "[DEBUG] New ID:" newid)
          (println "[DEBUG] New user:" newuser)
          (swap! users conj newuser)
          (.writeHead res 201 {:Content-Type "application/json"})
          (.end res (.stringify JSON newuser)))))))

(defn route-handler [req res]
  (println "[DEBUG] route-handler called")
  (println "[DEBUG] req url:" (.-url req))
  (println "[DEBUG] res available")
  (let [url (node.url/parse (.-url req) true)
        path (.-pathname url)
        method (.-method req)]
    (println "[DEBUG] method:" method)
    (println "[DEBUG] path:" path)
    (cond
      (and (= method "GET") (= path "/api/users"))
      (handle-get-users req res)
      
      (and (= method "GET") (str/startsWith path "/api/users/"))
      (let [id (str/slice path 11)]
        (handle-get-user req res id))
      
      (and (= method "POST") (= path "/api/users"))
      (handle-post-user req res)
      
      :else
      (do
        (.writeHead res 404 {:Content-Type "application/json"})
        (.end res (.stringify JSON {:error "Route not found"}))))))

(def server (node.http/createServer route-handler))
(println "[DEBUG] server object:" server)
(.listen server 3000)
