(ns api-server (:require [node.http] [node.url]))

(def users (atom [{:id 1 :name "Jo√£o" :email "joao@test.com"}
                  {:id 2 :name "Maria" :email "maria@test.com"}]))

(defn handle-get-users [req res]
  (let [response-data (.stringify JSON @users)]
    (.writeHead res 200 {:Content-Type "application/json"})
    (.end res response-data)))

(defn handle-get-user [req res id]
  (let [user (first (filter #(= (:id %) (parseInt id)) @users))]
    (if user
      (do
        (.writeHead res 200 {:Content-Type "application/json"})
        (.end res (.stringify JSON user)))
      (do
        (.writeHead res 404 {:Content-Type "application/json"})
        (.end res (.stringify JSON {:error "User not found"}))))))

(defn parse-request-body [req callback]
  (let [body (atom "")]
    (.on req "data" (fn [chunk] (swap! body str chunk)))
    (.on req "end" (fn [] (callback @body)))))

(defn handle-post-user [req res]
  (parse-request-body req
    (fn [body]
      (let [user-data (.parse JSON body)
            new-id (+ 1 (apply max (map :id @users)))
            new-user (assoc user-data :id new-id)]
        (swap! users conj new-user)
        (.writeHead res 201 {:Content-Type "application/json"})
        (.end res (.stringify JSON new-user))))))

(defn route-handler [req res]
  (let [url (node.url/parse (.-url req) true)
        path (.-pathname url)
        method (.-method req)]
    (cond
      (and (= method "GET") (= path "/api/users"))
      (handle-get-users req res)
      
      (and (= method "GET") (.startsWith path "/api/users/"))
      (let [id (.slice path 11)]
        (handle-get-user req res id))
      
      (and (= method "POST") (= path "/api/users"))
      (handle-post-user req res)
      
      :else
      (do
        (.writeHead res 404 {:Content-Type "application/json"})
        (.end res (.stringify JSON {:error "Route not found"}))))))

(def server (node.http/createServer route-handler))
(println "[DEBUG] server object:" server)
(.listen server 3000)
